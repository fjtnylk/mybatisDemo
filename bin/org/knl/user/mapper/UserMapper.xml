<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.knl.user.mapper.UserMapper">
	<!-- select标签所有属性列表
	<select 
		id="selectPerson"            // 在命名空间中唯一的标识符,可以被用来引用这条语句。
		parameterType="int"          // 将会传入这条语句的参数类的完全限定名或别名
		parameterMap="deprecated"    // 已废弃 
		resultType="hashmap"         // 从这条语句中返回的期望类型的类的完全限定名或别名。注意集 合情形,那应该是集合可以包含的类型,而不能是集合本身。使 用 resultType 或 resultMap,但不能同时使用。
		resultMap="personResultMap"  // 命名引用外部的 resultMap。 返回 map 是 MyBatis 最具力量的特性, 对其有一个很好的理解的话, 许多复杂映射的情形就能被解决了。 使用 resultMap 或resultType,但不能同时使用。
		flushCache="false"           // 将其设置为 true,不论语句什么时候被带哦用,都会导致缓存被 清空。默认值:false。
		useCache="true"              // 将其设置为 true, 将会导致本条语句的结果被缓存。 默认值: true。
		timeout="10000"              // 这个设置驱动程序等待数据库返回请求结果,并抛出异常时间的 最大等待值。默认不设置(驱动自行处理)
		fetchSize="256"              // 这是暗示驱动程序每次批量返回的结果行数。默认不设置(驱动 自行处理)。
		statementType="PREPARED"     // STA TEMENT,PREPARED 或 CALLABLE 的一种。 这会让 MyBatis 使用选择使用 Statement,PreparedStatement 或 CallableStatement。 默认值:PREPARED。
		resultSetType="FORWARD_ONLY" // FORWARD_ONLY|SCROLL_SENSITIVE|SCROLL_INSENSITIVE 中的一种。默认是不设置(驱动自行处理)。
	>	
	</select>
	-->
	<!-- insert标签所有属性列表
	<insert 
		id="insertUser" 
		parameterType="org.knl.user.bean.User"
		flushCache="true"
		statementType="PERPARED"
		keyProperty=""      // 标记一个属性, MyBatis 会通过getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。 默认: 不设置。
		keyColumn=""        // 标记一个属性, MyBatis 会通过getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。 默认: 不设置。
		useGeneratedKeys="" // 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys 方法来取出由数据(比如:像 MySQL 和 SQL Server这样的数据库管理系统的自动递增字段)内部生成的主键。 默认值:false。
		timeout="20"
	>
	</insert>
	-->
	<!-- update标签所有属性列表
	<update 
		id="updateUser"
		parameterType="org.knl.user.bean.User"
		flushCache="true"
		statementType="PREPARED"
		timeout="20">
		
	</update>
	-->
	<!-- delete标签所有属性列表
	<delete 
		id="deleteUser" 
		parameterType="org.knl.user.bean.User" 
		flushCache="true" 
		statementType="PERPARED" 
		timeout="20"
	>
		
	</delete>
	-->
	<!-- resultMap标签所有属性列表
	<resultMap>
		<constructor>
			类在实例化时,用来注入结果到构造方法中
			<idArg>ID 参数;标记结果作为 ID 可以帮助提高整体效能</idArg>
			<arg>注入到构造方法的一个普通结果</arg>
		</constructor>
		<result>
			注入到字段或 JavaBean 属性的普通结果
		</result>
		<association>
			一个复杂的类型关联;许多结果将包成这种类型
			• 嵌入结果映射 – 结果映射自身的关联,或者参考一个
		</association>
		<collection>
			复杂类型的集
			• 嵌入结果映射 – 结果映射自身的集,或者参考一个
		</collection>
		<discriminator>
			使用结果值来决定使用哪个结果映射
			<case>
				基于某些值的结果映射
				• 嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相 同的元素,或者它可以参照一个外部的结果映射。
			</case>
		</discriminator>
	</resultMap>
	-->
	
	
	<!-- 根据id获取用户信息 -->
	<resultMap type="org.knl.user.bean.User" id="userMapper">
		<id column="ID" property="id"></id>
		<result column="NAME" property="name"></result>
	</resultMap>
	<select id="getUser" resultMap="userMapper">
		select ID,NAME from CMSTR_USER where ID = #{id}
	</select>
	<!-- 查询所有用户信息 -->
	<select id="getUsers" resultMap="userMapper">
		select ID,NAME from CMSTR_USER
	</select>
	<!-- 添加用户信息 -->
	<insert id="addUser" parameterType="org.knl.user.bean.User" resultType="int">
		insert into CMSTR_USER values(#{id},#{name})
	</insert>
	<!-- 根据id删除用户信息 -->
	<delete id="deleteUser" resultType="int">
		delete from CMSTR_USER where ID = #{id}
	</delete>
	<!-- 根据id更新用户信息 -->
	<update id="updateUser" resultType="int">
		update CMSTR_USER set NAME = #{name} where ID = #{id}
	</update>
</mapper>