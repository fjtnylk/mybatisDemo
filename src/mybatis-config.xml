<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- properties属性 -->
	<properties resource="org/knl/sample/config.properties">
		<property name="driver" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/knl"></property>
		<property name="username" value="root"></property>
		<property name="password" value="password"></property>
	</properties>
	
	<!-- settings设置 -->
	<settings>
		<!-- 这个配置使全局的映射器启用或禁用缓存 -->
		<setting name="cacheEnabled" value="true"></setting>
		<!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会及时加载。 (延迟加载的概念为需要用到时才加载，所以如果为true的话代表启用延迟加载，只有在你需要用到时才去加载)-->
		<setting name="lazyLoadingEnabled" value="true"></setting>
		<!-- 当使用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则每种属性将会按需要加载。 -->
		<setting name="aggressiveLazyLoading" value="true"></setting>
		<!-- 允许或不允许多种结果集从一个单独的语句中返回(需要适合的驱动) -->
		<setting name="multipleResultSetsEnabled" value="true"></setting>
		<!-- 使用列标签代替列名。不同的驱动表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 -->
		<setting name="useColumnLabel" value="true"></setting>
		<!-- 允许JDBC支持生成的键，需要适合的驱动。如果设置为true则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效(比如Derby) -->
		<setting name="useGeneratedKeys" value="false"></setting>
		<!-- 指定mybatis如何自动映射列字段/属性 -->
		<!-- PARTIAL:只会自动映射简单，没有嵌套的结果。FULL:会自动映射任意复杂的结果（嵌套的或其他情况） -->
		<setting name="autoMappingBehavior" value="PARTIAL"></setting>
		<!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH执行器重用语句和批量更新 -->
		<setting name="defaultExecutorType" value="SIMPLE"></setting>
		<!-- 设置超时时间，它决定驱动等待一个数据库响应的时间 -->
		<setting name="defaultStatementTimeout" value="25"></setting>
		<!-- 允许使用行分页 -->
		<setting name="safeRowBoundsEnabled" value="false"></setting>
		<!-- 启用自动从数据库列名A_COLUMN到java类中的驼峰命名属性aColumn -->
		<setting name="mapUnderscoreToCamelCase" value="false"></setting>
		<!-- 本地高速缓存.Session:在会话期间，所有执行查询都会被缓存 。Statement:会话将只是使用statement执行数据将不被共享 -->
		<setting name="localCacheScope" value="SESSION"></setting>
		<!-- JDBC类型空值时，指定的值。（NULL,VARCHAR,OTHER） -->
		<setting name="jdbcTypeForNull" value="OTHER"></setting>
		<!-- 方法延迟加载时使用的分隔符号 -->
		<setting name="lazyLoadTriggerMethods" value=","></setting>
		<!-- 指定语言使用默认动态SQL -->
		<setting name="defaultScriptingLanguage" value="equals,clone,hashCode,toString"></setting>
		<!-- 当结果集中含有Null值时是否执行映射对象的setter或者Map对象的put方法。此设置对于原始类型如int,boolean等无效。 -->
		<setting name="callSettersOnNulls" value="false"></setting>
		<!-- log的前缀字符串 -->
		<setting name="logPrefix" value=""></setting>
		<!-- 实现log的具体实现类 -->
		<!-- SLF4J|LOG4j|JDK_LOGGING|COMMONS_LOGGING|STDOUT_LOGGING|NO_LOGGING -->
		<setting name="logImpl" value=""></setting>
		<!-- 实现动态代理的工厂 -->
		<!-- CGLIB|JAVASSISI -->
		<setting name="proxyFactory" value="CGLIB"></setting>
	</settings>
	
	<!-- typeAliases类型命名 -->
	<typeAliases>
		<typeAlias alias="user" type="org.knl.user.bean.User"></typeAlias>
		<typeAlias alias="userMapper" type="org.knl.user.mapper.UserMapper"></typeAlias>
	</typeAliases>
	
	<!-- typeHandlers类型处理器 -->
	<typeHandlers>
		<typeHandler handler="org.knl.typeHandler.ExampleTypeHandler"></typeHandler>
	</typeHandlers>
	
	<!-- objectFactory对象工厂 -->
	<objectFactory type="org.knl.objectFactory.ExampleObjectFactory">
		<property name="someProperty" value="100"></property>
	</objectFactory>
	
	<!-- plugins插件 -->
	<plugins>
		<plugin interceptor="org.knl.plugin.ExamplePlugin">
			<property name="someProperty" value="100"></property>
		</plugin>
	</plugins>
	
	<!-- environments环境 -->
	<environments default="development">
		<!-- environment环境变量 -->
		<environment id="development">
			<!-- transactionManager事物管理器 -->
			<transactionManager type="JDBC"/>
			<!-- dataSource数据源 -->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}"/>
				<property name="url" value="${url}"/>
				<property name="username" value="${username}"/>
				<property name="password" value="${password}"/>
			</dataSource>
		</environment>
	</environments>
	
	<!-- mappers映射器 -->
	<!-- 使用classpath加载资源 -->
	<mappers>
		<mapper resource="org/knl/user/mapper/UserMapper.xml"/>
	</mappers>
	<!-- 使用文件url加载资源 -->
	<mappers>
		<mapper url="file:///var/mappers/UserMapper.xml"></mapper>
	</mappers>
	<!-- 使用mapper接口加载资源 -->
	<mappers>
		<mapper class="org.knl.user.mapper.UserMapper"></mapper>
	</mappers>
	<!-- 注册包下所有的mapper接口 -->
	<mappers>
		<package name="org.knl.user.mapper"></package>
	</mappers>
</configuration>